* Project title: Design and Space exploration of NoC using FPGA.

* Project Description
	This project contains verilog files for Butterfly, Mesh, Ring, Star and Mesh VC-based topologies. The topologies were developed using Xilinx Studio.
	Mesh and Mesh-VC contain trace files with the help of which we can have trace-driven simulation for these topologies.

* Getting Started
	These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. 

* Prerequisites
	1. Xilinx Vivado software (available for Ubuntu and Windows Operating Systems)
	2. Knowledge of Verilog and Networking on Chips architecture

* Running the code
	1. Each folder in this directory contains all the files required to set up that topology. Create a project on Vivado. 
	2. Choose the Artix-7 family of boards. In the next step choose the xc7a100ticsg324-1L board.
	3. Import all the files in that particular folder. 
	4. Right-click on top_file.v and set it as the top file if it is not already set. 
	5. In the left menubar, click on Run Simulation -> Run Behavioural Simulation.
	6. A timing diagram is generated which shows packets being sent and received in the NoC.
	
* Format of Trace
	1. The .mem files in the project contain the packets to be sent in the network. Each line in this file corresponds to a new packet. 
	2. Say the line is 4F00000017. All entries are in hexadecimal.
		* 4 is the source node. 
		* F is the destination node. 
		* 00000017 is the cycle at which the packet has to be generated by the network.
	
* Modifying packets in the Network
	1. The file traffic_gen.v contains the trace file name from which the packets are generated. These are .mem files. 
	2. Follow the format of the trace as described above to generate your custom file. 
	3. Add the file to the project in Vivado. Change the file name in traffic_gen.v to the newly added .mem file and re-run the simulation. 

* Structure files for each topology
	1. Top file - makes the topology of the network
	2. Node.v - Every IP in the topology is a node. It generates packets and injects them to the network. It receives packets, calculates latency for them.
		2.1 Traffic_generator.v - Reads packets from the mem file and pass source and destination addresses to the node for packet formation.
	3. Router.v - Router connected to every node.
		3.1 Fifo.v - Is the buffer in the router.
		3.2 Routing logic - contains routing algorithm for each topology
		3.2 Arbiter 
		3.3 Crossbar

* Authors
	Sangeetha G S - 14CO141
	Vignesh R - 14CO153
	Matthew G Kallarackal - 14CO225

* Acknowledgments
	We thank Mr. Prabhu, Mr. Khyamalin and Dr. Basavaraj Talawar for guiding us throughout the course of this project and for helping us whenever required.
	We would also like to thank CSE Department, NITK for providing all the support for developing the project.